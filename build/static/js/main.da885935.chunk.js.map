{"version":3,"sources":["logo.svg","components/PostList/PostList.js","components/header/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Postlist","className","src","alt","Component","Header","type","placeholder","name","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yLAAAA,EAAOC,QAAU,IAA0B,kC,sJCItBC,G,mLAEb,OACI,yBAAKC,UAAU,iBACX,wBAAIA,UAAU,sBAAd,mBACA,yBAAKA,UAAU,eAEf,yBAAKA,UAAU,QACX,yBAAKC,IAAG,mBAAsBC,IAAI,KAClC,yBAAKF,UAAU,aACX,iDACA,yDACA,8BAAM,yBAAKC,IAAK,mBAAoBC,IAAI,KAAxC,cAGJ,gDAGJ,yBAAKF,UAAU,QACX,yBAAKC,IAAK,qBAAsBC,IAAI,KACpC,yBAAKF,UAAU,aACf,iDACI,yDACA,8BAAM,yBAAKC,IAAK,mBAAoBC,IAAI,KAAxC,cAGJ,gDAEJ,yBAAKF,UAAU,QACX,yBAAKC,IAAK,oBAAqBC,IAAI,KACnC,yBAAKF,UAAU,aACf,iDACI,yDACA,8BAAM,yBAAKC,IAAK,mBAAoBC,IAAI,KAAxC,cAGJ,iDAGJ,wBAAIF,UAAU,sBAAd,mBACA,yBAAKA,UAAU,kBAEf,yBAAKA,UAAU,QACX,yBAAKC,IAAG,mBAAsBC,IAAI,KAClC,yBAAKF,UAAU,aACf,iDACI,yDACA,8BAAM,yBAAKC,IAAK,mBAAoBC,IAAI,KAAxC,cAGJ,gDAGJ,yBAAKF,UAAU,QACX,yBAAKC,IAAK,qBAAsBC,IAAI,KACpC,yBAAKF,UAAU,aACf,iDACI,yDACA,8BAAM,yBAAKC,IAAK,mBAAoBC,IAAI,KAAxC,cAGJ,gDAEJ,yBAAKF,UAAU,QACX,yBAAKC,IAAK,oBAAqBC,IAAI,KACnC,yBAAKF,UAAU,aACf,iDACI,yDACA,8BAAM,yBAAKC,IAAK,mBAAoBC,IAAI,KAAxC,cAGJ,sD,GAvEkBC,cCCjBC,E,uKAEb,OAEI,yBAAKJ,UAAU,mBACX,yBAAKA,UAAU,uBACf,yBAAKA,UAAU,cACX,yBAAKC,IAAG,yBAA4BC,IAAI,eAE5C,yBAAKF,UAAU,mBACX,0BAAMA,UAAU,gBACZ,2BAAOK,KAAK,OAAOC,YAAY,YAAYC,KAAK,WAChD,4BAAQF,KAAK,UAAb,c,GAZYF,aCYrBK,MAXf,WACE,OACE,yBAAKR,UAAU,OACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCCYS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.da885935.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from \"react\";\nimport './PostList.css'\n\n\nexport default class Postlist extends Component {\n    render () {\n        return (\n            <div className=\"postContainer\">\n                <h3 className=\"postcontainerTitle\">Subreddit Title</h3>\n                <div className=\"postListTop\">\n                    \n                <div className=\"card\">\n                    <img src={`/images/lamb.jpg`} alt=\"\"/>\n                    <div className=\"card-text\">\n                        <h3>Image Text Widget</h3>\n                        <h4>Date:9th September, 2020.</h4>\n                        <span><img src={'/images/love.svg'} alt=\"\"/>100 votes</span>\n                        \n                    </div>\n                    <button>View post ></button>\n                   \n                </div>\n                <div className=\"card\">\n                    <img src={'/images/eating.jpg'} alt=\"\"/>\n                    <div className=\"card-text\">\n                    <h3>Image Text Widget</h3>\n                        <h4>Date:9th September, 2020.</h4>\n                        <span><img src={'/images/love.svg'} alt=\"\"/>100 votes</span>\n                        \n                    </div>\n                    <button>View post ></button>\n                </div>\n                <div className=\"card\">\n                    <img src={'/images/sheep.jpg'} alt=\"\"/>\n                    <div className=\"card-text\">\n                    <h3>Image Text Widget</h3>\n                        <h4>Date:9th September, 2020.</h4>\n                        <span><img src={'/images/love.svg'} alt=\"\"/>100 votes</span>\n                        \n                    </div>\n                    <button>View post ></button>\n                </div>\n                </div>\n                <h3 className=\"postcontainerTitle\">Subreddit Title</h3>\n                <div className=\"postListBottom\">\n                \n                <div className=\"card\">\n                    <img src={`/images/lamb.jpg`} alt=\"\"/>\n                    <div className=\"card-text\">\n                    <h3>Image Text Widget</h3>\n                        <h4>Date:9th September, 2020.</h4>\n                        <span><img src={'/images/love.svg'} alt=\"\"/>100 votes</span>\n                        \n                    </div>\n                    <button>View post ></button>\n                   \n                </div>\n                <div className=\"card\">\n                    <img src={'/images/eating.jpg'} alt=\"\"/>\n                    <div className=\"card-text\">\n                    <h3>Image Text Widget</h3>\n                        <h4>Date:9th September, 2020.</h4>\n                        <span><img src={'/images/love.svg'} alt=\"\"/>100 votes</span>\n                        \n                    </div>\n                    <button>View post ></button>\n                </div>\n                <div className=\"card\">\n                    <img src={'/images/sheep.jpg'} alt=\"\"/>\n                    <div className=\"card-text\">\n                    <h3>Image Text Widget</h3>\n                        <h4>Date:9th September, 2020.</h4>\n                        <span><img src={'/images/love.svg'} alt=\"\"/>100 votes</span>\n                        \n                    </div>\n                    <button>View post ></button>\n                </div>\n                </div>\n            </div>\n       )\n    }\n};","import React, { Component } from 'react';\nimport './Header.Styles.css';\nimport '../../components/PostList/PostList.js';\n\n\nexport default class Header extends Component {\n    render () {\n        return (\n        \n            <div className=\"headerContainer\">\n                <div className=\"headerContainerFlex\">\n                <div className=\"headerLogo\">\n                    <img src={`../images/edenlogo.svg`} alt=\"eden logo\"/>\n                </div>\n                <div className=\"searchContainer\">\n                    <form className=\"headerSearch\">\n                        <input type=\"text\" placeholder=\"SEARCH...\" name=\"search\"/>\n                        <button type=\"submit\">GO</button>\n                    </form>\n                </div>\n                </div>\n            </div>\n        )\n    }\n};","import React from 'react';\nimport logo from './logo.svg';\n// import './App.css';\nimport Header from './components/header/Header';\nimport Postlist from './components/PostList/PostList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <Header/>\n        <Postlist/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}